#! /usr/bin/env zsh

#	listCompletions: lists all available completions
#	-------------------------------------------------------------------
function listCompletions () {
	for command completion in ${(kv)_comps:#-*(-|-,*)}
	do
		printf "%-32s %s\n" $command $completion
	done | sort
}

#	extract:		Extract most know archives with one command
#	-------------------------------------------------------------------
function extract () {
	if [ -f "$1" ] ; then
		case $1 in
			*.tar.bz2)   tar xjf "$1"     ;;
			*.tar.gz)    tar xzf "$1"     ;;
			*.bz2)       bunzip2 "$1"     ;;
			*.rar)       unrar e "$1"     ;;
			*.gz)        gunzip "$1"      ;;
			*.tar)       tar xf "$1"      ;;
			*.tbz2)      tar xjf "$1"     ;;
			*.tgz)       tar xzf "$1"     ;;
			*.zip)       unzip "$1"       ;;
			*.Z)         uncompress "$1"  ;;
			*.7z)        7z x "$1"        ;;
			*)     echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

#	dadjoke:		Fetches a dadjoke straight to the terminal
#	-------------------------------------------------------------------
function dadjoke() {
	curl -w '\n' -H "Accept: text/plain" https://icanhazdadjoke.com/
}

#	mp4:			Input video file and convert it to mp4
#	-------------------------------------------------------------------
function mp4() {
	_fileName=$(basename "$1")
	ffmpeg -i "$1" "${_fileName%.*}.mp4"
}

#	pdf417:			Generate a PDF417 SVG image
#	-------------------------------------------------------------------
function pdf417() {
	curl "http://www.barcode-generator.org/zint/api.php?bc_number=55&bc_download=1&bc_format=1&bc_size=s&bc_data=$1" | pbcopy
}

#	tusDelete:		Delete a tus upload
#	-------------------------------------------------------------------
function tusDelete() {
	curl -X DELETE -H 'Tus-Resumable: 1.0.0' "$@"
}

#	deleteCWD:		Prompts the user to delete the current directory
#					Usually used to delete a temporary directory created
# 					by `mktemp -d`
#	-------------------------------------------------------------------
function deleteCWD() {
	CWD=$(pwd)
	if read -q "choice?[y/N] to delete $CWD: "; then
		echo
		cd $HOME
		rm -rf $CWD
	else
		echo
		echo "Cancelled."
	fi

	unset CWD
}

#	merge_zsh_histories:
#	-------------------------------------------------------------------
function merge_zsh_histories() {
	set -x
	cat $@ | awk -v date="WILL_NOT_APPEAR$(date +"%s")" '{if (sub(/\\$/,date)) printf "%s", $0; else print $0}' | LC_ALL=C sort -u | awk -v date="WILL_NOT_APPEAR$(date +"%s")" '{gsub('date',"\\\n"); print $0}'
}

#	jq:             Wraps yq to use jq syntax
#	-------------------------------------------------------------------
function jq {
	yq -oj "$@"
}

#	claim:			Claim a directory as your own
#	-------------------------------------------------------------------
function claim {
	if [ -z "$1" ]; then
		echo "Usage: claim <directory|file>"
		return 1
	fi
	sudo chown -R $(id -u):$(id -g) $@
}

#	pm:			Wrapper for package manager
#	-------------------------------------------------------------------
function pm {
  if [[ -f bun.lockb ]]; then
    command bun "$@"
  elif [[ -f pnpm-lock.yaml ]]; then
    command pnpm "$@"
  elif [[ -f yarn.lock ]]; then
    command yarn "$@"
  elif [[ -f package-lock.json ]]; then
    command npm "$@"
  else
    command pnpm "$@"
  fi
}

function cleanupKernels () {
	# Skip if not fedora
	if ! grep -q fedora /etc/os-release; then
		echo "Not a fedora system, skipping kernel cleanup"
		return
	fi
	kernels=("${(@f)$(rpm -q kernel-core)}")
	count=${#kernels[@]}

	if (( count > 2 )); then
		current="kernel-core-$(uname -r)"
		last=${kernels[-1]}

		keep=("${current}")
		[[ "${last}" != "${current}" ]] && keep+=("${last}")

		to_remove=()
		for k in "${kernels[@]}"; do
			[[ "${keep[@]}" =~ "${k}" ]] || to_remove+=("${k}")
		done


		echo "Kernels to be removed:"
		for kernel in "${to_remove[@]}"; do
			echo "  - $kernel"
		done
		echo "Continue? [y/N]"
		read -q "choice?"
		echo
		if [[ ! $choice =~ ^[yY]$ ]]; then
			echo "Aborting kernel cleanup"
			return
		fi
		echo "Removing kernels: ${to_remove[@]}"
		[[ ${#to_remove[@]} -gt 0 ]] && sudo dnf remove -y "${to_remove[@]}"
	elif
		(( count == 2 )); then
		echo "Only two kernels installed, no cleanup needed"
	else
		echo "No extra kernels installed, nothing to do"
	fi
}
